<?php

/**
 * @file
 * Contains tmgmt_deepl_glossary.module.
 */

use Drupal\tmgmt\Entity\Job;
use Drupal\tmgmt\JobInterface;
use Drupal\tmgmt_deepl_glossary\DeeplMultilingualGlossaryInterface;
use Drupal\tmgmt_deepl_glossary\Entity\DeeplMultilingualGlossary;

/**
 * Implements hook_tmgmt_deepl_checkout_settings_form_alter().
 */
function tmgmt_deepl_glossary_tmgmt_deepl_checkout_settings_form_alter(array &$form, JobInterface $job): void {
  // Get matching glossaries for the job.
  $glossaries = DeeplMultilingualGlossary::getMatchingGlossaries(strval($job->getTranslatorId()), $job->getRemoteSourceLanguage(), $job->getRemoteTargetLanguage());
  // Build select field with available glossaries.
  if (count($glossaries) > 1) {
    // Add glossary selection.
    $form['glossary_id'] = [
      '#type' => 'select',
      '#title' => t('Select DeepL glossary'),
      '#required' => TRUE,
      '#options' => $glossaries,
      '#description' => t('Use selected glossary to customize translations (only glossaries with matching source and target language are listed).'),
      '#default_value' => $job->getSetting('glossary_id') ?: '',
    ];
  }
}

/**
 * Implements hook_tmgmt_deepl_has_checkout_settings_alter().
 */
function tmgmt_deepl_glossary_tmgmt_deepl_has_checkout_settings_alter(bool &$has_checkout_settings, JobInterface $job): void {
  // Get matching glossaries for the job.
  $glossaries = DeeplMultilingualGlossary::getMatchingGlossaries(strval($job->getTranslatorId()), $job->getRemoteSourceLanguage(), $job->getRemoteTargetLanguage());
  $has_checkout_settings = (count($glossaries) > 1);
}

/**
 * Implements hook_tmgmt_deepl_query_string_alter().
 */
function tmgmt_deepl_glossary_tmgmt_deepl_query_string_alter(Job $job, array &$query_data, array $query_params): void {
  $glossary_id = NULL;
  // Add glossary_id based on job settings.
  if ($job->getSetting('glossary_id')) {
    $glossary_id = $job->getSetting('glossary_id');
  }
  // Auto select for glossary.
  else {
    $glossaries = DeeplMultilingualGlossary::getMatchingGlossaries(strval($job->getTranslatorId()), $job->getRemoteSourceLanguage(), $job->getRemoteTargetLanguage());
    // Build select field with available glossaries.
    if (count($glossaries) == 1) {
      $glossary_ids = array_keys($glossaries);
      $glossary_id = reset($glossary_ids);
    }
  }

  // Add glossary_id to query data, if available.
  if ($glossary_id !== NULL) {
    $glossary = Drupal::entityTypeManager()->getStorage('deepl_ml_glossary')->load($glossary_id);
    assert($glossary instanceof DeeplMultilingualGlossaryInterface);
    $query_data['glossary_id'] = $glossary->getGlossaryId();
  }
}

/**
 * Overwrite menu_local_action styling for "Fetch DeepL glossaries" link.
 */
function tmgmt_deepl_glossary_preprocess_menu_local_action(array &$variables): void {
  if (isset($variables['link']['#url']) && $variables['link']['#url']->getRouteName() == 'tmgmt_deepl_glossary.fetch_form') {
    $variables['link']['#options']['attributes']['class'] = ['button'];
  }
}
